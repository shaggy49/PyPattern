# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\bdrba\Documents\QTDesign\mainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# ! WARNING: Any manual changes made to this file will be lost when pyuic5 is
# ! run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore
from PyQt5 import QtGui
from PyQt5 import QtWidgets
from PyQt5.QtWidgets import QMessageBox

import db_manager as dbm
import matrix_util as utils
from gui.py_files.settings_dialog import Ui_Dialog as settings_dialog
from gui.py_files.salvataggio_matrice_nome_tag import Ui_Dialog as salvataggio_matrice
from gui.py_files.risultato_ricerca_dialog import Ui_Dialog as risultato_ricerca_dialog
 

BOTTONE_MATRICE_STANDARD = (
    "QPushButton {\n"
    " padding: 0;\n"
    " border: none;\n"
    " display:inline-block;\n"
    " margin-left:0;\n"
    " margin-right:0;\n"
    "    background-color: white;\n"
    "}\n"
    "QPushButton:hover {\n"
    "    background-color: gray;\n"
    "}\n"
    "QPushButton:pressed {\n"
    "    background-color: black;\n"
    "}\n"
)

BOTTONE_MATRICE_CLICCATO = (
    "QPushButton {\n"
    " padding: 0;\n"
    " border: none;\n"
    " display:inline-block;\n"
    " margin-left:0;\n"
    " margin-right:0;\n"
    "    background-color: black;\n"
    "}\n"
    "QPushButton:hover {\n"
    "    background-color: gray;\n"
    "}\n"
    "QPushButton:pressed {\n"
    "    background-color: black;\n"
    "}\n"
)


class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(431, 431)
        self.verticalLayout = QtWidgets.QVBoxLayout(Dialog)


class Ui_MainWindow(object):
    clickedMatrix = []
    zero_one_matrix = []

    ###### Riapplicazione della matrice ####
    # ? svuota la gridlayout e la ripopola
    def reconfig_matrix(self, m, n):
        self.clickedMatrix.clear()
        for i in reversed(range(self.grid.count())):
            self.grid.itemAt(i).widget().setParent(None)
        self.buttonsGenerator(m, n)

    def error_dialog(self, text):
        self.msg = QMessageBox()
        self.msg.setWindowTitle("Error")
        self.msg.setText(text)
        self.msg.setIcon(QMessageBox.Critical)
        self.msg.setStandardButtons(QMessageBox.Ok)
        self.msg.setDefaultButton(QMessageBox.Ok)
        self.msg.show()

    def success_dialog(self, text):
        self.msg = QMessageBox()
        self.msg.setWindowTitle("Success")
        self.msg.setText(text)
        self.msg.setIcon(QMessageBox.Information)
        self.msg.setStandardButtons(QMessageBox.Ok)
        self.msg.setDefaultButton(QMessageBox.Ok)
        self.msg.show()

    def call_for_settings(self):
        Dialog = QtWidgets.QDialog()
        ui = settings_dialog()
        ui.setupUi(Dialog)
        Dialog.show()
        risp = Dialog.exec_()

        if risp == QtWidgets.QDialog.Accepted:
            try:
                m = int(ui.righeMLineEdit.text())
                n = int(ui.colonneNLineEdit.text())
                if m == 0 or n == 0:
                    self.error_dialog("M and N must be > 0")
                else:
                    self.reconfig_matrix(m, n)
            except:
                self.error_dialog("M and N must be Integer numbers!")

    def call_for_save_pattern(self):
        Dialog = QtWidgets.QDialog()
        ui = salvataggio_matrice()
        ui.setupUi(Dialog)
        Dialog.show()
        risp = Dialog.exec_()

        if risp == QtWidgets.QDialog.Accepted:
            if ui.nameLineEdit.text().strip() and ui.tagLineEdit.text().strip():
                return ui.nameLineEdit.text(), ui.tagLineEdit.text()
            else:
                return
        return "-1"

    def insertPatternToDB(self):
        clean_matrix = utils.matrix_cleaner(self.zero_one_matrix)
        print("insert", clean_matrix)
        if clean_matrix.size == 0:
            self.show_error_insert_popup()
        else:
            information_pattern = self.call_for_save_pattern()
            if not information_pattern:
                self.error_dialog("Fields must be filled!")
                return
            elif information_pattern == "-1":
                return
            dbm.init()
            # todo: da sostituire il primo parametro dell'insert con il parametro pattern_name del metodo
            if dbm.insert(
                information_pattern[0],
                information_pattern[1],
                utils.serialize_matrix(clean_matrix),
                utils.generate_serialized_list(clean_matrix),
            ):
                self.success_dialog("Pattern successfully inserted!")
                self.clearAll()
            else:
                self.error_dialog("Pattern not inserted!")

    def show_search_results(self, result):
        Dialog = QtWidgets.QDialog()
        ui = risultato_ricerca_dialog()
        ui.setupUi(Dialog)
        ui.textEdit.setText(result)
        Dialog.show()
        risp = Dialog.exec_()
        
    # todo la ricerca avviene tramite quale tag? cosa gli passiamo?
    def searchPatternInDB(self):
        clean_matrix = utils.matrix_cleaner(self.zero_one_matrix)
        if clean_matrix.size == 0:
            self.error_dialog("You must insert a pattern for the search!")
        else:
            dbm.init()
            patternFound = dbm.search_pattern(
                utils.generate_serialized_list(clean_matrix)
            )
            if patternFound != None:
                print(f"Il pattern trovato ha nome = {patternFound}")
                self.show_search_results( patternFound)
                self.clearAll()
            else:
                self.error_dialog("Pattern not found")

    def buttonClicked(self, i, j, button):
        if [i, j] in self.clickedMatrix:
            button.setStyleSheet(BOTTONE_MATRICE_STANDARD)
            self.zero_one_matrix[i][j] = 0
            self.clickedMatrix.remove([i, j])
            print("lo rimuovo dalla matrice")
        else:
            self.clickedMatrix.append([i, j])
            self.zero_one_matrix[i][j] = 1
            button.setStyleSheet(BOTTONE_MATRICE_CLICCATO)
            print("lo aggiungo alla matrice")
        # print(self.clickedMatrix)
        print(self.zero_one_matrix)

    def show_clear_matrix_popup(self):
        self.msg = QMessageBox()
        self.msg.setWindowTitle("Restore")
        self.msg.setText("Restore the defaul matrix?")
        self.msg.setIcon(QMessageBox.Question)
        self.msg.setStandardButtons(QMessageBox.Yes | QMessageBox.Cancel)
        self.msg.setDefaultButton(QMessageBox.Yes)
        self.msg.show()
        self.msg.buttonClicked.connect(self.clearAll)

    def show_error_insert_popup(self):
        self.msg = QMessageBox()
        self.msg.setWindowTitle("Insert error")
        self.msg.setText("You must insert a pattern")
        self.msg.setIcon(QMessageBox.Critical)
        self.msg.setStandardButtons(QMessageBox.Ok)
        self.msg.setDefaultButton(QMessageBox.Ok)
        self.msg.show()

    def clearAll(self):
        # ? pulizia variabile matrice
        self.clickedMatrix.clear()
        for i in range(len(self.zero_one_matrix)):
            for j in range(len(self.zero_one_matrix[i])):
                self.zero_one_matrix[i][j] = 0

        # ? cicla per ricolorare la matrice
        for i in range(self.grid.count()):
            item = self.grid.itemAt(i).widget()
            if isinstance(item, QtWidgets.QPushButton):
                item.setStyleSheet(BOTTONE_MATRICE_STANDARD)

    def buttonsGenerator(self, m, n):
        self.zero_one_matrix = [[0 for i in range(n)] for j in range(m)]
        for i in range(m):
            for j in range(n):
                pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
                sizePolicy = QtWidgets.QSizePolicy(
                    QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding
                )
                sizePolicy.setHorizontalStretch(0)
                sizePolicy.setVerticalStretch(0)
                sizePolicy.setHeightForWidth(
                    pushButton_4.sizePolicy().hasHeightForWidth()
                )
                pushButton_4.setSizePolicy(sizePolicy)

                palette = QtGui.QPalette()
                brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
                brush.setStyle(QtCore.Qt.SolidPattern)
                palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
                brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
                brush.setStyle(QtCore.Qt.SolidPattern)
                palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
                brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
                brush.setStyle(QtCore.Qt.SolidPattern)
                palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
                brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
                brush.setStyle(QtCore.Qt.SolidPattern)
                palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
                brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
                brush.setStyle(QtCore.Qt.SolidPattern)
                palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
                brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
                brush.setStyle(QtCore.Qt.SolidPattern)
                palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
                brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
                brush.setStyle(QtCore.Qt.SolidPattern)
                palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
                brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
                brush.setStyle(QtCore.Qt.SolidPattern)
                palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
                brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
                brush.setStyle(QtCore.Qt.SolidPattern)
                palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)

                pushButton_4.setPalette(palette)
                pushButton_4.setStyleSheet(BOTTONE_MATRICE_STANDARD)

                pushButton_4.setObjectName("button_{}".format(str(i) + str(j)))
                pushButton_4.clicked.connect(
                    lambda ch, i=i, j=j, button=pushButton_4: self.buttonClicked(
                        i, j, button
                    )
                )

                self.grid.addWidget(pushButton_4, i, j)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.grid = QtWidgets.QGridLayout()
        self.grid.setContentsMargins(15, -1, -1, -1)
        self.grid.setSpacing(0)
        self.grid.setObjectName("grid")

        ##########################
        self.buttonsGenerator(5, 5)
        # ##########################

        self.horizontalLayout.addLayout(self.grid)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.verticalLayout_2.setContentsMargins(15, -1, 15, -1)
        self.verticalLayout_2.setSpacing(0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        spacerItem = QtWidgets.QSpacerItem(
            20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_2.addItem(spacerItem)

        #####---Settings button ---########
        self.settingsButton = QtWidgets.QPushButton(self.centralwidget)
        self.settingsButton.setStyleSheet(
            "QPushButton {\n"
            "    color: #494949 !important;\n"
            "    text-transform: uppercase;\n"
            "    text-decoration: none;\n"
            "    background: #ffffff;\n"
            "    margin-bottom:5px;\n"
            "    padding: 0.2em;\n"
            "    border: 4px solid #494949 !important;\n"
            "    transition: all 0.4s ease 0s;\n"
            "    border-radius:5px;\n"
            "}\n"
            "\n"
            "QPushButton:pressed {\n"
            "    color: #ffffff !important;\n"
            "    background: #f6b93b;\n"
            "    border-color: #f6b93b !important;\n"
            "    transition: all 0.4s ease 0s;\n"
            "}"
        )
        self.settingsButton.setObjectName("settingsButton")
        self.verticalLayout_2.addWidget(self.settingsButton)
        self.settingsButton.clicked.connect(self.call_for_settings)

        #####---Insert button ---########
        self.insertButton = QtWidgets.QPushButton(self.centralwidget)
        self.insertButton.setStyleSheet(
            "QPushButton {\n"
            "    color: #494949 !important;\n"
            "    text-transform: uppercase;\n"
            "    text-decoration: none;\n"
            "    background: #ffffff;\n"
            "    margin-bottom:5px;\n"
            "    padding: 0.2em;\n"
            "    border: 4px solid #494949 !important;\n"
            "    transition: all 0.4s ease 0s;\n"
            "    border-radius:5px;\n"
            "}\n"
            "\n"
            "QPushButton:pressed {\n"
            "    color: #ffffff !important;\n"
            "    background: #f6b93b;\n"
            "    border-color: #f6b93b !important;\n"
            "    transition: all 0.4s ease 0s;\n"
            "}"
        )
        self.insertButton.setObjectName("insertButton")
        self.verticalLayout_2.addWidget(self.insertButton)
        self.insertButton.clicked.connect(self.insertPatternToDB)

        #####---Search pattern button---########
        self.searchPatternButton = QtWidgets.QPushButton(self.centralwidget)
        self.searchPatternButton.setStyleSheet(
            "QPushButton {\n"
            "    color: #494949 !important;\n"
            "    text-transform: uppercase;\n"
            "    text-decoration: none;\n"
            "    background: #ffffff;\n"
            "    margin-bottom:5px;\n"
            "    padding: 0.2em;\n"
            "    border: 4px solid #494949 !important;\n"
            "    transition: all 0.4s ease 0s;\n"
            "    border-radius:5px;\n"
            "}\n"
            "\n"
            "QPushButton:pressed {\n"
            "    color: #ffffff !important;\n"
            "    background: #f6b93b;\n"
            "    border-color: #f6b93b !important;\n"
            "    transition: all 0.4s ease 0s;\n"
            "}"
        )
        self.searchPatternButton.setObjectName("searchPatternButton")
        self.verticalLayout_2.addWidget(self.searchPatternButton)
        self.searchPatternButton.clicked.connect(self.searchPatternInDB)

        #####---Clear button---########
        self.clearButton = QtWidgets.QPushButton(self.centralwidget)
        self.clearButton.setStyleSheet(
            "QPushButton {\n"
            "    color: #494949 !important;\n"
            "    text-transform: uppercase;\n"
            "    text-decoration: none;\n"
            "    background: #ffffff;\n"
            "    margin-bottom:5px;\n"
            "    padding: 0.2em;\n"
            "    border: 4px solid #494949 !important;\n"
            "    transition: all 0.4s ease 0s;\n"
            "    border-radius:5px;\n"
            "}\n"
            "\n"
            "QPushButton:pressed {\n"
            "    color: #ffffff !important;\n"
            "    background: #f6b93b;\n"
            "    border-color: #f6b93b !important;\n"
            "    transition: all 0.4s ease 0s;\n"
            "}"
        )
        self.clearButton.setObjectName("clearAll")
        self.verticalLayout_2.addWidget(self.clearButton)
        self.clearButton.clicked.connect(self.show_clear_matrix_popup)

        ####
        spacerItem1 = QtWidgets.QSpacerItem(
            20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding
        )
        self.verticalLayout_2.addItem(spacerItem1)
        self.horizontalLayout.addLayout(self.verticalLayout_2)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.gridLayout_2.addLayout(self.verticalLayout, 0, 0, 1, 1)
        self.gridLayout.addLayout(self.gridLayout_2, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "App"))
        self.settingsButton.setText(_translate("MainWindow", "Settings"))
        self.insertButton.setText(_translate("MainWindow", "Insert"))
        self.searchPatternButton.setText(_translate("MainWindow", "Search pattern"))
        self.clearButton.setText(_translate("MainWindow", "Clear"))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
